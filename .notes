
// dql.truncate remain pointin to executable
// dql._truncate remain pointing to serializable

dql.register('truncate', {
  serializable: function(resources, result, params){
    return _.map(result, function(record){
      return _.mapValues(record, function(value, key){
        return (params.field === key) ? this.executable(params.field) : value ;
      }, this);
    }, this);
  },
  executable: function(field, dql) {
    // Returns a pipeable version
    return dql.queue({
      transform: this,
      field: field,
    });
  }
});

dql.truncate('field')

// if it's syncronous then return process data else return a promise
var dataql = dql
  .data([])
  .set('table_name')
  .rename('old_name','new_name')
  .join('field', 'value', '=') // = as default and optional > <
  .limit(start, number_of_rows)
  .sort('field', 'direction')
  .sum('field', 'group_by', 'as')
  .groupBy('field')
  .cast('field', type)
  .substr('field', start, end)
  .avg('field', 'group_by', 'as') // as is optional
  .percentage('field', 'group_by', 'as')  // as is optional
  .max('field', 'group_by', 'as')
  .min('field', 'group_by', 'as')
  .count('field', 'group_by')
  .capitalize('field')
  .truncate('field')
  .commit();


//
var dataql = dql
  .set('table_name')
  .rename('old_name','new_name')
  .join('field', 'value', '=') // = as default and optional > <
  .limit(start, number_of_rows);

// Reusable queries
// if those are backends then return a promise if not return the data
dataql.transform({mycsv: []}, {mygdocs: []});
dataql.transform({myothercsv: []}, {mygdocs2: []})
dataql.transform({myanothercsv: []}, {mygdocs3: []})

// Returns a serialized version of the query
var query = dql.query();


// Create transforms and apply to collections
dql
  .data(data) // load data. if array query is syncronous else returns a promise
  .query(query) // set transformations queue
  .commit(); // executes the query

